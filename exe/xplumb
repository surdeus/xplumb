#!/bin/env rc
# k1574's plumber.

fn usage {
	echo usage: $0 [url] >[2=1]
	exit 1
}

fn open_in_video_browser {
	exec mpv --really-quiet $url
}

fn open_in_telnet_browser {
	user_flag = `{~ $user _  || echo -l $user}
	host_flag = `{~ $host _ || echo $host}
	port_flag = `{~ $port _ || echo $port}
	comm = (telnet $user_flag $host_flag $port_flag)
	exec xmux -t $url rc -c $"comm';read' 
}

fn open_in_ftp_browser {
	#user_flag = `{~ $user _  || echo -l $user}
	#host_flag = `{~ $host _ || echo $host}
	#port_flag = `{~ $port _ || echo $port}
	#comm  = `{echo ftp $user_flag $host_flag $port_flag}
	exec xmux -t 'ftp:'$url rc -c 'mkdir -p $download && cd $download; ftp '$"url';read'
}

fn open_in_http_music_player {
	exec xmux -t 'Music Player:'$url rc -c 'mpv '$url'; read'
}

fn open_in_ssh_browser {
	exec xmux -t 'ssh:'$url rc -c 'ssh '$url'; read'
}

fn handle_local_image {
	exec xivo $p
}

fn handle_curl_image {
	imgpath = `{mktemp | tr -d ' '}^.$ext
	curl $url -o $imgpath
	exec xivo $imgpath
}

fn handle_local_video {
	exec mpv --really-quiet $p
}

fn handle_local_text {
	exec xsam $p
}

fn handle_local_dir {
	comm = 'rc -l'
	cd $p; t=`{pwd}
	exec xmux -t$"t rc -c $"comm
}

fn handle_local_book {
	exec zathura $p
}

fn plumb_local_file {
	switch($p){
		case *.d
			handle_local_dir
		case *.fb2 *.djvu *.pdf
			handle_local_book
		case *.^$imgfmt
			handle_local_image
		case *.mp4 *.mkv
			handle_local_video
		case *.c *.rc *.md *.txt *.cc *.cpp *.C *.cs *.txt *.py *.hs *.rs *
			handle_local_text
		case *.doc *.docx:
			exec libreoffice $p
	}

}

fn open_in_gopher_browser {
	exec xmux -t 'goph:'$url goph $url
}

fn open_in_web_browser {
	exec xsrf $url
}

if(test -z $load){
	echo $0: '$load' is not set >[2=1]
	exit 1
}
if(test $#* -ne 1){
	usage
	exit 1
}


url = $1
urlp = `{goblin urlprs $url} || {
	echo $0: $url: incorrect URL >[1=2]
	exit 1
}

scheme = $urlp(1)
user = $urlp(2)
pass = $urlp(3)
host = $urlp(4)
port = $urlp(5)
p = $urlp(6)
ext = `{extname $p}

imgfmt = `{2ff || {echo $0: images are unsupported >[1=2]} }

domains = (com ru org us online)
switch($host){
case *.youtube'.'^$domains youtube'.'^$domains
	switch($p){
	case /watch /watch/* /embed /embed/*
		open_in_video_browser
	}
case ('' 'www.')^jut.su
	switch($p){
	case /*/*
		open_in_video_browser	
	}
case bitreich.org
	switch($p){
	case /live
		open_in_http_music_player
	}
}

switch($p){
case *.^$imgfmt
	switch($scheme){
	case http https gopher ftp ftps
		handle_curl_image
	}
case *.mp4 *.mkv *.webm *.m3u
	switch($scheme){
	case gopher http https ftp ftps
		open_in_video_browser
	}
}

switch($scheme){
	case file _
		~ $host _ || {
			echo $0: $host: local files cannot have host in URL >[2=1]
			exit 1
		}
		if(test -f $p)
			plumb_local_file
		if not if(test -d $p)
			handle_local_dir
		echo $0: $p: no such file or directory
		exit 1
	case http https
		~ $host _ && {
			echo $0: $url: no host specified
			exit 1
		}
		open_in_web_browser
	case gopher
		open_in_gopher_browser
	case telnet
		open_in_telnet_browser
	case ftp
		open_in_ftp_browser
	case ssh
		open_in_ssh_browser
	case *
		echo $0: $scheme: unknown scheme >[2=1]
		exit 1
}
